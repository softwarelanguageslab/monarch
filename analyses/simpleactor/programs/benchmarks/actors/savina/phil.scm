;; Adapted from Savina benchmarks ("Dining Philosophers benchmarks", coming from Wikipedia)
;; TODO: this is the -seq version
(letrec ((N 3)
         (M 3)
         (rounds M)
         (num-forks N)
         (counter-actor (actor "counter" (n)
                               (add (m) (become counter-actor (+ n m)))
                               (finish () (display n) (terminate))))
         (arbitrator-actor (actor "arbitrator" (forks num-exited)
                                  (hungry (p id)
                                          (let ((left id) (right (modulo (+ id 1) num-forks)))
                                            (if (or (vector-ref forks left) (vector-ref forks right))
                                                (send p denied)
                                                (begin
                                                  ;; Modeled as side effects, probably not the best thing to do...
                                                  ;; but since there is only one arbitrator, that should be fine
                                                  (vector-set! forks left #t)
                                                  (vector-set! forks right #t)
                                                  (send p eat))))
                                          (become arbitrator-actor forks num-exited))
                                  (done (id)
                                        (let ((left id) (right (modulo (+ id 1) num-forks)))
                                          (vector-set! left #f)
                                          (vector-set! right #f))
                                        (become arbitrator-actor forks num-exited))
                                  (exit ()
                                        (if (= (+ num-exited 1) num-forks)
                                            (terminate)
                                            (become arbitrator-actor forks (+ num-exited 1))))))
         (philosopher-actor (actor "philosopher" (id rounds-so-far local-counter)
                                   (denied ()
                                           (send arbitrator hungry self id)
                                           (become philosopher-actor id rounds-so-far (+ local-counter 1)))
                                   (eat ()
                                        (send counter add local-counter)
                                        (if (< (+ rounds-so-far 1) rounds)
                                            (begin
                                              (send self start)
                                              (become philosopher-actor id (+ rounds-so-far 1) local-counter))
                                            (begin
                                              (send arbitrator done id)
                                              (terminate))))
                                   (start ()
                                          (send arbitrator hungry self id)
                                          (become philosopher-actor id rounds-so-far local-counter))))
         (counter (create counter-actor 0))
         (arbitrator (create arbitrator-actor
                             (vector #f #f #f)
                             0))
         (phil1 (create philosopher-actor 0 0 0))
         (phil2 (create philosopher-actor 0 0 0))
         (phil3 (create philosopher-actor 0 0 0)))
  (send phil1 start)
  (send phil2 start)
  (send phil3 start))
