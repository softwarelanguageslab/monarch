#lang simpleactor

(letrec ((assert (lambda (cnd) cnd))
         (>= assert)
         (<= assert)
         (> assert)
         (orig-+ +)
         (orig-- -)
         (orig-* *)
         (orig-/ /)
         (orig-> >)
         (orig-< <)
         (orig-= =)
         (orig->= >=)
         (orig-<= <=)
         (orig-car car)
         (orig-cdr cdr)
         (orig-cons cons)
         (orig-vector-ref vector-ref)
         (orig-vector-set! vector-set!))
  '()
  (letrec ((empty '())
           (listof (lambda (contract) map))
           (real?/c real?)
           (boolean?/c boolean?)
           (number?/c number?)
           (any/c (lambda (g7546 g7547 g7548)

                    g7548))
           (any?/c #t)
           (cons?/c pair?)
           (cons/c car)
           (pair?/c (lambda (g7555 g7556 g7557) g7557))
           (integer?/c integer?)
           (symbol?/c symbol?)
           (string?/c string?)
           (and/c #f)
           (or/c (lambda (c1 c2)

                   c1))
           (null?/c null?)
           (list-of null?)
           (any? #t)
           (nonzero? =)
           (nonzero?/c =)
           (>=/c orig->=)
           (>/c orig->)
           (</c orig-<)
           (<=/c orig-<=)
           (=/c (lambda (n)

                  n))
           (meta (lambda (v) v))

           (xj7588 'server)

           (xj7595 'server)

           (xj7602 'server)

           (xk7610 'client)

           (xj7616 'server)

           (xj7623 'server)

           (xj7630 'server)

           (add1 +)

           (xk7638 'client)

           (xj7644 'server)

           (xj7650 'server)

           (cons (lambda (a b) (orig-cons a b)))
           (vector?/c vector?)

           (xj7666 'server)

           (xj7672 'server)

           (cdddr cdr)
           (__toplevel_set-car! set-car!)
           (map assert)
           (cdar cdr)
           (cadadr car)
           (cdadar cdr)
           (call-with-output-file assert)
           (caddr car)
           (cdaadr cdr)
           (assq assert)
           (even? =)
           (char<=? assert)
           (cdddar cdr)
           (list-tail assert)
           (halt '())
           (char-alphabetic? #f)
           (char-whitespace? =)
           (cddar cdr)
           (positive? assert)
           (string=? (lambda (s1 s2) bool-top))
           ($pc '())
           (ref-set set-car!)
           (void #f)
           (cddr cdr)
           (truncate assert)
           ($cmp '())
           (bool-top #t)
           (equal? eq?)
           (cdaaar cdr)
           (caaddr car)
           (eqv? eq?)
           (call-with-input-file assert)
           (ref cons)
           (char>=? assert)
           (cdaar cdr)
           (cdaddr cdr)
           (__toplevel_cdr cdr)
           (cadar car)
           (caadr car)
           (char-ci>? assert)
           (__toplevel_set-cdr! set-cdr!)
           (caaaar car)
           (negative? assert)
           (memv (lambda (e l) memq))
           (caaar car)
           (debug '())
           (reverse assert)
           (caaadr car)
           (cddadr cdr)
           (odd? assert)
           (caadar car)
           (apply assert)
           (member equal?)
           (cddddr cdr)
           (cadddr car)
           (int-top random)
           (zero? assert)
           (string>=? string=?)
           (cadr car)
           (__toplevel_car car)
           (list? #f)
           (cddaar cdr)
           (char-numeric? #f)
           (__toplevel_cons cons)
           (assv assert)
           (not #f)
           (__toplevel_append (lambda (l1 l2) append))
           (memq assert)
           (cadaar car)

           (rec 0)

           (char-ci<=? assert)
           (string>? not)
           (cdadr cdr)
           (assoc assert)
           (caar car)
           (char>? assert)
           (string<=? string=?)
           (for-each assert)
           (abs assert)
           (char-ci>=? assert)
           (caddar car)
           (newline #f)
           (lcm /)
           (deref car)
           (list-ref assert)
           (gcd =))
    (letrec ((ping-behavior (lambda ()

                              (receive (('ping print) ((cons enhanced (cons k7679 j7683))
                                                       ((trace k7679) j7683))))))
             (pong-behavior (self^))
             (ping/c (lambda (k7695 j7696 a7694)
                       (lambda (v7697)
                         (letrec ((result7703 ((lambda (k7699 j7700 v7701)
                                                 (match v7701
                                                   ((x7702 (cons 'enhanced (cons (ping/cm) x7702))))))
                                               k7695
                                               j7696
                                               v7697)))
                           (a7694 result7703)))))
             (ping/cm (lambda ()
                        (lambda (j7706)
                          (trace j7706)

                          (blame j7706)))))
      (letrec ((ping (letrec ((xj7719 'client)
                              (xk7720 'server))
                       (ping/c xj7719
                               xk7720
                               (letrec ((act (spawn^ (ping-behavior))))
                                 (lambda (msg) (send^ act msg))))))
               (pong pong-behavior))
        (ping pong)))))
