nterpreter-exe: not an atomic(f7234 (number?/c j7232 k7233 g7229) (number?/c j7232 k7233 g7230) (number?/c j7232 k7233 g7231))
CallStack (from HasCallStack):
  error, called at src/Analysis/ASE/Common.hs:413:28 in interpreter-0.1.0.0-inplace:Analysis.ASE.Common

  interpreter-exe: variable + not found fromList [(Adr 1:11-1:11 [],RVal (fromList ["(lam (v) (letrec ([(g7235:1:38,True)]) g7235))"], ⊥)),(Adr 2:11-2:11 [],RVal (fromList ["(lam (v) (letrec ([(g7236:2:38,v)]) g7236))"], ⊥)),(Adr 3:11-3:11 [],RVal (fromList ["(lam (v lst) (letrec ([(g7237:5:23,(letrec ([(g7238:6:33,(letrec ([(x-e7239:7:43,lst)]) (match x-e7239 [(ValuePat '(),False),(PairPat (IdePat v1:11:44) (IdePat vs:11:47),(letrec ([(x-cnd7240:12:48,(eq? v v1))]) (if x-cnd7240 True (member v vs))))])))]) g7238))]) g7237))"], ⊥)),(Adr 16:11-16:11 [],RVal (BoolKey -> Constant False, False)),(Adr 17:11-17:11 [],RVal (fromList ["(lam (k j) (letrec ([(g7241:19:23,(lam (v) (letrec ([(g7242:19:51,v)]) g7242)))]) g7241))"], ⊥)),(Adr 20:11-20:11 [],RVal (fromList ["(lam (v) (letrec ([(g7243:22:23,(letrec ([(x7244:22:39,(= v 0))]) (not x7244)))]) g7243))"], ⊥)),(Adr 25:33-25:33 [],RVal (fromList ["(lam (g7160 g7161 g7162) (letrec ([(g7247:27:45,(letrec ([(x-cnd7248:28:55,(real? g7162))]) (if x-cnd7248 g7162 (blame g7160))))]) g7247))"], ⊥)),(Adr 33:33-33:33 [],RVal (fromList ["(lam (g7163 g7164 g7165) (letrec ([(g7249:35:45,(letrec ([(x-cnd7250:36:55,(boolean? g7165))]) (if x-cnd7250 g7165 (blame g7163))))]) g7249))"], ⊥)),(Adr 42:33-42:33 [],RVal (fromList ["(lam (g7166 g7167 g7168) (letrec ([(g7251:44:45,(letrec ([(x-cnd7252:45:55,(number? g7168))]) (if x-cnd7252 g7168 (blame g7166))))]) g7251))"], ⊥)),(Adr 51:33-51:33 [],RVal (fromList ["(lam (g7169 g7170 g7171) (letrec ([(g7253:53:45,(letrec ([(x-cnd7254:54:55,((lam (v) True) g7171))]) (if x-cnd7254 g7171 (blame g7169))))]) g7253))"], ⊥)),(Adr 62:33-62:33 [],RVal (fromList ["(lam (g7172 g7173 g7174) (letrec ([(g7255:64:45,(letrec ([(x-cnd7256:65:55,((lam (v) True) g7174))]) (if x-cnd7256 g7174 (blame g7172))))]) g7255))"], ⊥)),(Adr 73:33-73:33 [],RVal (fromList ["(lam (g7169 g7170 g7171) (letrec ([(g7253:53:45,(letrec ([(x-cnd7254:54:55,((lam (v) True) g7171))]) (if x-cnd7254 g7171 (blame g7169))))]) g7253))"], ⊥)),(Adr 74:33-74:33 [],RVal (fromList ["(lam (g7175 g7176 g7177) (letrec ([(g7257:76:45,(letrec ([(x-cnd7258:77:55,(pair? g7177))]) (if x-cnd7258 g7177 (blame g7175))))]) g7257))"], ⊥)),(Adr 82:33-82:33 [],RVal (fromList ["(lam (g7178 g7179 g7180) (letrec ([(g7259:84:45,(letrec ([(x-cnd7260:85:55,(pair? g7180))]) (if x-cnd7260 g7180 (blame g7178))))]) g7259))"], ⊥)),(Adr 90:33-90:33 [],RVal (fromList ["(lam (g7181 g7182 g7183) (letrec ([(g7261:92:45,(letrec ([(x-cnd7262:93:55,(integer? g7183))]) (if x-cnd7262 g7183 (blame g7181))))]) g7261))"], ⊥)),(Adr 99:33-99:33 [],RVal (fromList ["(lam (c1 c2) (letrec ([(g7263:101:45,(lam (k j v) (letrec ([(g7264:103:57,(letrec ([(x-cnd7265:104:67,(c1 k j v))]) (if x-cnd7265 (c2 k j v) False)))]) g7264)))]) g7263))"], ⊥)),(Adr 111:33-111:33 [],RVal (fromList ["(lam (contract) (letrec ([(g7266:113:45,(lam (k j v) (letrec ([(g7267:115:57,(letrec ([(x-cnd7268:116:67,(null? v))]) (if x-cnd7268 '() (letrec ([(x7272:120:71,(letrec ([(x7273:121:81,(car v))]) (contract k j x7273))),(x7269:128:71,(letrec ([(x7271:129:81,(list-of contract)),(x7270:132:81,(cdr v))]) (x7271 k j x7270)))]) (cons x7272 x7269)))))]) g7267)))]) g7266))"], ⊥)),(Adr 144:33-144:33 [],RVal (fromList ["(lam (v) (letrec ([(g7274:144:60,True)]) g7274))"], ⊥)),(Adr 145:33-145:33 [],RVal (fromList ["(lam (v) (letrec ([(g7275:147:45,(letrec ([(x7276:148:55,(= v 0))]) (not x7276)))]) g7275))"], ⊥)),(Adr 151:33-151:33 [],RVal (fromList ["(lam (g7184 g7185 g7186) (letrec ([(g7277:153:45,(letrec ([(x-cnd7278:154:55,((lam (v) (not (= v 0))) g7186))]) (if x-cnd7278 g7186 (blame g7184))))]) g7277))"], ⊥)),(Adr 165:33-165:33 [],RVal (fromList ["(lam (v) (letrec ([(g7279:165:60,v)]) g7279))"], ⊥)),(PrimAdr "*",RVal (PrimKey -> fromList ["*"], */v)),(PrimAdr "+",RVal (PrimKey -> fromList ["+"], +/v)),(PrimAdr "-",RVal (PrimKey -> fromList ["-"], -/v)),(PrimAdr "/",RVal (PrimKey -> fromList ["/"], //v)),(PrimAdr "<",RVal (PrimKey -> fromList ["<"], </v)),(PrimAdr "<=",RVal (PrimKey -> fromList ["<="], <=/v)),(PrimAdr "=",RVal (PrimKey -> fromList ["="], =/v)),(PrimAdr ">",RVal (PrimKey -> fromList [">"], >/v)),(PrimAdr ">=",RVal (PrimKey -> fromList [">="], >=/v)),(PrimAdr "acos",RVal (PrimKey -> fromList ["acos"], acos/v)),(PrimAdr "atan",RVal (PrimKey -> fromList ["atan"], atan/v)),(PrimAdr "bool-top",RVal (PrimKey -> fromList ["bool-top"], bool-top/v)),(PrimAdr "car",RVal (PrimKey -> fromList ["car"], car/v)),(PrimAdr "cdr",RVal (PrimKey -> fromList ["cdr"], cdr/v)),(PrimAdr "ceiling",RVal (PrimKey -> fromList ["ceiling"], ceiling/v)),(PrimAdr "char-ci<?",RVal (PrimKey -> fromList ["char-ci<?"], char-ci<?/v)),(PrimAdr "char-ci=?",RVal (PrimKey -> fromList ["char-ci=?"], char-ci=?/v)),(PrimAdr "char-downcase",RVal (PrimKey -> fromList ["char-downcase"], char-downcase/v)),(PrimAdr "char-lower-case?",RVal (PrimKey -> fromList ["char-lower-case?"], char-lower-case?/v)),(PrimAdr "char-upcase",RVal (PrimKey -> fromList ["char-upcase"], char-upcase/v)),(PrimAdr "char-upper-case?",RVal (PrimKey -> fromList ["char-upper-case?"], char-upper-case?/v)),(PrimAdr "char<?",RVal (PrimKey -> fromList ["char<?"], char<?/v)),(PrimAdr "char=?",RVal (PrimKey -> fromList ["char=?"], char=?/v)),(PrimAdr "cons",RVal (PrimKey -> fromList ["cons"], cons/v)),(PrimAdr "constant-false",RVal (PrimKey -> fromList ["constant-false"], constant-false/v)),(PrimAdr "constant-true",RVal (PrimKey -> fromList ["constant-true"], constant-true/v)),(PrimAdr "display",RVal (PrimKey -> fromList ["display"], display/v)),(PrimAdr "displayln",RVal (PrimKey -> fromList ["displayln"], displayln/v)),(PrimAdr "eq?",RVal (PrimKey -> fromList ["eq?"], eq?/v)),(PrimAdr "expt",RVal (PrimKey -> fromList ["expt"], expt/v)),(PrimAdr "false?",RVal (PrimKey -> fromList ["false?"], false?/v)),(PrimAdr "floor",RVal (PrimKey -> fromList ["floor"], floor/v)),(PrimAdr "format",RVal (PrimKey -> fromList ["format"], format/v)),(PrimAdr "fresh",RVal (PrimKey -> fromList ["fresh"], fresh/v)),(PrimAdr "list",RVal (PrimKey -> fromList ["list"], list/v)),(PrimAdr "log",RVal (PrimKey -> fromList ["log"], log/v)),(PrimAdr "modulo",RVal (PrimKey -> fromList ["modulo"], modulo/v)),(PrimAdr "not",RVal (PrimKey -> fromList ["not"], not/v)),(PrimAdr "null?",RVal (PrimKey -> fromList ["null?"], null?/v)),(PrimAdr "number?",RVal (PrimKey -> fromList ["number?"], number?/v)),(PrimAdr "pair?",RVal (PrimKey -> fromList ["pair?"], pair?/v)),(PrimAdr "print",RVal (PrimKey -> fromList ["print"], print/v)),(PrimAdr "procedure?",RVal (PrimKey -> fromList ["procedure?"], procedure?/v)),(PrimAdr "quotient",RVal (PrimKey -> fromList ["quotient"], quotient/v)),(PrimAdr "random",RVal (PrimKey -> fromList ["random"], random/v)),(PrimAdr "real?",RVal (PrimKey -> fromList ["real?"], real?/v)),(PrimAdr "remainder",RVal (PrimKey -> fromList ["remainder"], remainder/v)),(PrimAdr "round",RVal (PrimKey -> fromList ["round"], round/v)),(PrimAdr "send^",RVal (PrimKey -> fromList ["send^"], send^/v)),(PrimAdr "set-car!",RVal (PrimKey -> fromList ["set-car!"], set-car!/v)),(PrimAdr "set-cdr!",RVal (PrimKey -> fromList ["set-cdr!"], set-cdr!/v)),(PrimAdr "sin",RVal (PrimKey -> fromList ["sin"], sin/v)),(PrimAdr "sqrt",RVal (PrimKey -> fromList ["sqrt"], sqrt/v)),(PrimAdr "string-append",RVal (PrimKey -> fromList ["string-append"], string-append/v)),(PrimAdr "string-length",RVal (PrimKey -> fromList ["string-length"], string-length/v)),(PrimAdr "string-ref",RVal (PrimKey -> fromList ["string-ref"], string-ref/v)),(PrimAdr "string-set!",RVal (PrimKey -> fromList ["string-set!"], string-set!/v)),(PrimAdr "string?",RVal (PrimKey -> fromList ["string?"], string?/v)),(PrimAdr "tan",RVal (PrimKey -> fromList ["tan"], tan/v)),(PrimAdr "true?",RVal (PrimKey -> fromList ["true?"], true?/v)),(PrimAdr "vector-length",RVal (PrimKey -> fromList ["vector-length"], vector-length/v)),(PrimAdr "vector-ref",RVal (PrimKey -> fromList ["vector-ref"], vector-ref/v)),(PrimAdr "vector-set!",RVal (PrimKey -> fromList ["vector-set!"], vector-set!/v)),(PrimAdr "vector?",RVal (PrimKey -> fromList ["vector?"], vector?/v)),(PrimAdr "wait-until-all-finished",RVal (PrimKey -> fromList ["wait-until-all-finished"], wait-until-all-finished/v))]Just (Adr 167:33-167:33 [])
